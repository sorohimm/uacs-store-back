// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/api/store.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreServiceRequesterClient is the client API for StoreServiceRequester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceRequesterClient interface {
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetAllProducts(ctx context.Context, in *AllProductsRequest, opts ...grpc.CallOption) (*AllProductsResponse, error)
}

type storeServiceRequesterClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceRequesterClient(cc grpc.ClientConnInterface) StoreServiceRequesterClient {
	return &storeServiceRequesterClient{cc}
}

func (c *storeServiceRequesterClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.StoreServiceRequester/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceRequesterClient) GetAllProducts(ctx context.Context, in *AllProductsRequest, opts ...grpc.CallOption) (*AllProductsResponse, error) {
	out := new(AllProductsResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.StoreServiceRequester/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceRequesterServer is the server API for StoreServiceRequester service.
// All implementations must embed UnimplementedStoreServiceRequesterServer
// for forward compatibility
type StoreServiceRequesterServer interface {
	GetProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	GetAllProducts(context.Context, *AllProductsRequest) (*AllProductsResponse, error)
	mustEmbedUnimplementedStoreServiceRequesterServer()
}

// UnimplementedStoreServiceRequesterServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceRequesterServer struct {
}

func (UnimplementedStoreServiceRequesterServer) GetProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedStoreServiceRequesterServer) GetAllProducts(context.Context, *AllProductsRequest) (*AllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedStoreServiceRequesterServer) mustEmbedUnimplementedStoreServiceRequesterServer() {}

// UnsafeStoreServiceRequesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceRequesterServer will
// result in compilation errors.
type UnsafeStoreServiceRequesterServer interface {
	mustEmbedUnimplementedStoreServiceRequesterServer()
}

func RegisterStoreServiceRequesterServer(s grpc.ServiceRegistrar, srv StoreServiceRequesterServer) {
	s.RegisterService(&StoreServiceRequester_ServiceDesc, srv)
}

func _StoreServiceRequester_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceRequesterServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.StoreServiceRequester/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceRequesterServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreServiceRequester_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceRequesterServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.StoreServiceRequester/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceRequesterServer).GetAllProducts(ctx, req.(*AllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreServiceRequester_ServiceDesc is the grpc.ServiceDesc for StoreServiceRequester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreServiceRequester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.sorohimm.uacs_store.StoreServiceRequester",
	HandlerType: (*StoreServiceRequesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _StoreServiceRequester_GetProduct_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _StoreServiceRequester_GetAllProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/store.proto",
}

// StoreServiceCommanderClient is the client API for StoreServiceCommander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceCommanderClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
}

type storeServiceCommanderClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceCommanderClient(cc grpc.ClientConnInterface) StoreServiceCommanderClient {
	return &storeServiceCommanderClient{cc}
}

func (c *storeServiceCommanderClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceCommanderClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error) {
	out := new(CreateBrandResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceCommanderClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceCommanderServer is the server API for StoreServiceCommander service.
// All implementations must embed UnimplementedStoreServiceCommanderServer
// for forward compatibility
type StoreServiceCommanderServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error)
	CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	mustEmbedUnimplementedStoreServiceCommanderServer()
}

// UnimplementedStoreServiceCommanderServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceCommanderServer struct {
}

func (UnimplementedStoreServiceCommanderServer) CreateProduct(context.Context, *CreateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedStoreServiceCommanderServer) CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedStoreServiceCommanderServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedStoreServiceCommanderServer) mustEmbedUnimplementedStoreServiceCommanderServer() {}

// UnsafeStoreServiceCommanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceCommanderServer will
// result in compilation errors.
type UnsafeStoreServiceCommanderServer interface {
	mustEmbedUnimplementedStoreServiceCommanderServer()
}

func RegisterStoreServiceCommanderServer(s grpc.ServiceRegistrar, srv StoreServiceCommanderServer) {
	s.RegisterService(&StoreServiceCommander_ServiceDesc, srv)
}

func _StoreServiceCommander_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceCommanderServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceCommanderServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreServiceCommander_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceCommanderServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceCommanderServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreServiceCommander_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceCommanderServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.StoreServiceCommander/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceCommanderServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreServiceCommander_ServiceDesc is the grpc.ServiceDesc for StoreServiceCommander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreServiceCommander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.sorohimm.uacs_store.StoreServiceCommander",
	HandlerType: (*StoreServiceCommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _StoreServiceCommander_CreateProduct_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _StoreServiceCommander_CreateBrand_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _StoreServiceCommander_CreateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/store.proto",
}
