// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/api/store.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ICDServiceClient is the client API for ICDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICDServiceClient interface {
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type iCDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewICDServiceClient(cc grpc.ClientConnInterface) ICDServiceClient {
	return &iCDServiceClient{cc}
}

func (c *iCDServiceClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.ICDService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICDServiceServer is the server API for ICDService service.
// All implementations must embed UnimplementedICDServiceServer
// for forward compatibility
type ICDServiceServer interface {
	GetProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	mustEmbedUnimplementedICDServiceServer()
}

// UnimplementedICDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedICDServiceServer struct {
}

func (UnimplementedICDServiceServer) GetProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedICDServiceServer) mustEmbedUnimplementedICDServiceServer() {}

// UnsafeICDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICDServiceServer will
// result in compilation errors.
type UnsafeICDServiceServer interface {
	mustEmbedUnimplementedICDServiceServer()
}

func RegisterICDServiceServer(s grpc.ServiceRegistrar, srv ICDServiceServer) {
	s.RegisterService(&ICDService_ServiceDesc, srv)
}

func _ICDService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICDServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.ICDService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICDServiceServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ICDService_ServiceDesc is the grpc.ServiceDesc for ICDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.sorohimm.uacs_store.ICDService",
	HandlerType: (*ICDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProduct",
			Handler:    _ICDService_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/store.proto",
}
