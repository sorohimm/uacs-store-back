// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/api/order.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceCommanderClient is the client API for OrderServiceCommander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceCommanderClient interface {
	NewOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderServiceCommanderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceCommanderClient(cc grpc.ClientConnInterface) OrderServiceCommanderClient {
	return &orderServiceCommanderClient{cc}
}

func (c *orderServiceCommanderClient) NewOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/github.com.sorohimm.uacs_store.OrderServiceCommander/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceCommanderServer is the server API for OrderServiceCommander service.
// All implementations must embed UnimplementedOrderServiceCommanderServer
// for forward compatibility
type OrderServiceCommanderServer interface {
	NewOrder(context.Context, *Order) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderServiceCommanderServer()
}

// UnimplementedOrderServiceCommanderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceCommanderServer struct {
}

func (UnimplementedOrderServiceCommanderServer) NewOrder(context.Context, *Order) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedOrderServiceCommanderServer) mustEmbedUnimplementedOrderServiceCommanderServer() {}

// UnsafeOrderServiceCommanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceCommanderServer will
// result in compilation errors.
type UnsafeOrderServiceCommanderServer interface {
	mustEmbedUnimplementedOrderServiceCommanderServer()
}

func RegisterOrderServiceCommanderServer(s grpc.ServiceRegistrar, srv OrderServiceCommanderServer) {
	s.RegisterService(&OrderServiceCommander_ServiceDesc, srv)
}

func _OrderServiceCommander_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceCommanderServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.sorohimm.uacs_store.OrderServiceCommander/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceCommanderServer).NewOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderServiceCommander_ServiceDesc is the grpc.ServiceDesc for OrderServiceCommander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderServiceCommander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.sorohimm.uacs_store.OrderServiceCommander",
	HandlerType: (*OrderServiceCommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _OrderServiceCommander_NewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/order.proto",
}
