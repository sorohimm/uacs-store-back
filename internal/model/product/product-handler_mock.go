// Code generated by MockGen. DO NOT EDIT.
// Source: api-handler.go

// Package model is a generated GoMock package.
package product

import (
	context "context"
	api "github.com/sorohimm/uacs-store-back/pkg/api/product"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/sorohimm/uacs-store-back/internal/storage/postgres/api/product/dto"
)

// MockProductRequesterHandler is a mock of ProductRequesterHandler interface.
type MockProductRequesterHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProductRequesterHandlerMockRecorder
}

// MockProductRequesterHandlerMockRecorder is the mock recorder for MockProductRequesterHandler.
type MockProductRequesterHandlerMockRecorder struct {
	mock *MockProductRequesterHandler
}

// NewMockProductRequesterHandler creates a new mock instance.
func NewMockProductRequesterHandler(ctrl *gomock.Controller) *MockProductRequesterHandler {
	mock := &MockProductRequesterHandler{ctrl: ctrl}
	mock.recorder = &MockProductRequesterHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRequesterHandler) EXPECT() *MockProductRequesterHandlerMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockProductRequesterHandler) GetAllProducts(ctx context.Context, limit, offset int64) (*dto.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", ctx, limit, offset)
	ret0, _ := ret[0].(*dto.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductRequesterHandlerMockRecorder) GetAllProducts(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductRequesterHandler)(nil).GetAllProducts), ctx, limit, offset)
}

// GetAllProductsWithBrand mocks base method.
func (m *MockProductRequesterHandler) GetAllProductsWithBrand(ctx context.Context, brandID, limit, offset int64) (*dto.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsWithBrand", ctx, brandID, limit, offset)
	ret0, _ := ret[0].(*dto.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsWithBrand indicates an expected call of GetAllProductsWithBrand.
func (mr *MockProductRequesterHandlerMockRecorder) GetAllProductsWithBrand(ctx, brandID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsWithBrand", reflect.TypeOf((*MockProductRequesterHandler)(nil).GetAllProductsWithBrand), ctx, brandID, limit, offset)
}

// GetAllProductsWithBrandAndType mocks base method.
func (m *MockProductRequesterHandler) GetAllProductsWithBrandAndType(ctx context.Context, typeID, brandID, limit, offset int64) (*dto.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsWithBrandAndType", ctx, typeID, brandID, limit, offset)
	ret0, _ := ret[0].(*dto.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsWithBrandAndType indicates an expected call of GetAllProductsWithBrandAndType.
func (mr *MockProductRequesterHandlerMockRecorder) GetAllProductsWithBrandAndType(ctx, typeID, brandID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsWithBrandAndType", reflect.TypeOf((*MockProductRequesterHandler)(nil).GetAllProductsWithBrandAndType), ctx, typeID, brandID, limit, offset)
}

// GetAllProductsWithType mocks base method.
func (m *MockProductRequesterHandler) GetAllProductsWithType(ctx context.Context, typeID, limit, offset int64) (*dto.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductsWithType", ctx, typeID, limit, offset)
	ret0, _ := ret[0].(*dto.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductsWithType indicates an expected call of GetAllProductsWithType.
func (mr *MockProductRequesterHandlerMockRecorder) GetAllProductsWithType(ctx, typeID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductsWithType", reflect.TypeOf((*MockProductRequesterHandler)(nil).GetAllProductsWithType), ctx, typeID, limit, offset)
}

// GetProductByID mocks base method.
func (m *MockProductRequesterHandler) GetProductByID(ctx context.Context, id int64) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRequesterHandlerMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRequesterHandler)(nil).GetProductByID), ctx, id)
}

// MockProductCommanderHandler is a mock of ProductCommanderHandler interface.
type MockProductCommanderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProductCommanderHandlerMockRecorder
}

// MockProductCommanderHandlerMockRecorder is the mock recorder for MockProductCommanderHandler.
type MockProductCommanderHandlerMockRecorder struct {
	mock *MockProductCommanderHandler
}

// NewMockProductCommanderHandler creates a new mock instance.
func NewMockProductCommanderHandler(ctrl *gomock.Controller) *MockProductCommanderHandler {
	mock := &MockProductCommanderHandler{ctrl: ctrl}
	mock.recorder = &MockProductCommanderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCommanderHandler) EXPECT() *MockProductCommanderHandlerMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductCommanderHandler) CreateProduct(ctx context.Context, req *api.CreateProductRequest) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, req)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductCommanderHandlerMockRecorder) CreateProduct(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductCommanderHandler)(nil).CreateProduct), ctx, req)
}
