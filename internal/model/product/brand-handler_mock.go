// Code generated by MockGen. DO NOT EDIT.
// Source: brand-handler.go

// Package model is a generated GoMock package.
package product

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	brand "github.com/sorohimm/uacs-store-back/internal/storage/postgres/api/brand"
	api "github.com/sorohimm/uacs-store-back/pkg/product"
)

// MockBrandCommanderHandler is a mock of BrandCommanderHandler interface.
type MockBrandCommanderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBrandCommanderHandlerMockRecorder
}

// MockBrandCommanderHandlerMockRecorder is the mock recorder for MockBrandCommanderHandler.
type MockBrandCommanderHandlerMockRecorder struct {
	mock *MockBrandCommanderHandler
}

// NewMockBrandCommanderHandler creates a new mock instance.
func NewMockBrandCommanderHandler(ctrl *gomock.Controller) *MockBrandCommanderHandler {
	mock := &MockBrandCommanderHandler{ctrl: ctrl}
	mock.recorder = &MockBrandCommanderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandCommanderHandler) EXPECT() *MockBrandCommanderHandlerMockRecorder {
	return m.recorder
}

// CreateBrand mocks base method.
func (m *MockBrandCommanderHandler) CreateBrand(ctx context.Context, req *api.CreateBrandRequest) (*brand.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrand", ctx, req)
	ret0, _ := ret[0].(*brand.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBrand indicates an expected call of CreateBrand.
func (mr *MockBrandCommanderHandlerMockRecorder) CreateBrand(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrand", reflect.TypeOf((*MockBrandCommanderHandler)(nil).CreateBrand), ctx, req)
}
