run:
    # default concurrency is a available CPU number
    concurrency: 4

    # timeout for analysis, e.g. 30s, 5m, default is 1m
    timeout: 5m

    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1

    # include test files or not, default is true
    tests: false

    # which dirs to skip: they won't be analyzed;
    skip-dirs:
        - vendor$
        - sandbox
        - _sandbox
        - libs/monkey

    # which files to skip: they will be analyzed, but issues from them
    # won't be reported.
    skip-files:
        - ".*\\.pb\\.go$"

    # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
    # If invoked with -mod=readonly, the go command is disallowed from the implicit
    # automatic updating of go.mod described above. Instead, it fails when any changes
    # to go.mod are needed. This setting is most useful to check that go.mod does
    # not need updates, such as in a continuous integration and testing system.
    # If invoked with -mod=vendor, the go command assumes that the vendor
    # directory holds the correct copies of dependencies and ignores
    # the dependency descriptions in go.mod.
    modules-download-mode: readonly

    # Allow multiple parallel golangci-lint instances running.
    # If false (default) - golangci-lint acquires file lock on start.
    allow-parallel-runners: false



# output configuration options
output:
    # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
    format: colored-line-number
    # print lines of code with issue, default is true
    print-issued-lines: true
    # print linter name in the end of issue text, default is true
    print-linter-name: true
    # make issues output unique by line, default is true
    uniq-by-line: true
    # add a prefix to the output file references; default is no prefix
    path-prefix: ""

issues:
    max-issues-per-linter: 50
    max-same-issues: 0
    new: false
    exclude-use-default: false
    exclude-case-sensitive: false
    exclude:
        - "G401"
        - "G501"
        - "G104"
        - "G402"
        - "G304"
        - "G404"
        - "G204"
        - "G101"
        - "SA1019"
        - "err113"
        - ".Close()"
        - "unnecessary leading newline"
        - "should have comment or be unexported"
        - "exported const"

severity:
    # Default value is empty string.
    # Set the default severity for issues. If severity rules are defined and the issues
    # do not match or no severity is provided to the rule this will be the default
    # severity applied. Severities should match the supported severity names of the
    # selected out format.
    # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
    # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
    # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
    default-severity:
    # The default value is false.
    # If set to true severity-rules regular expressions become case sensitive.
    case-sensitive: false
    # Default value is empty list.
    # When a list of severity rules are provided, severity information will be added to lint
    # issues. Severity rules have the same filtering capability as exclude rules except you
    # are allowed to specify one matcher per severity rule.
    # Only affects out formats that support setting severity information.
    rules:

linters:
    enable-all: true
    disable:
        - ireturn
        - lll
        - varnamelen
        - interfacer
        - scopelint
        - maligned
        - golint
        - errorlint
        - exhaustivestruct
        - wrapcheck
        - nilnil
        - nlreturn
        - exhaustive
        - gochecknoinits
        - gomnd
        - godot
        - wsl
        - gochecknoglobals
        - gci
        - unparam
        - godox
        - contextcheck
        - exhaustruct
        - revive
        - tagliatelle



# all available settings of specific linters
linters-settings:
    depguard:

    dupl:
        # tokens count to trigger issue, 150 by default
        threshold: 1000

    exhaustive:
        default-signifies-exhaustive: false

    funlen:
        lines: 600
        statements: 100
    gci:

    goconst:
        # minimal length of string constant, 3 by default
        min-len: 5
        # minimal occurrences count to trigger, 3 by default
        min-occurrences: 5

    gocritic:
        enabled-tags:
            - diagnostic
            - performance
            - style
        disabled-checks:
            - dupImport # https://github.com/go-critic/go-critic/issues/845
            - ifElseChain
            - octalLiteral
            - whyNoLint
            - wrapperFunc
            - paramTypeCombine
            - sloppyReassign
            - equalFold
            - unnamedResult
            - rangeValCopy

    gocyclo:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        #min-complexity: 15
        max-complexity: 15
    cyclop:
        max-complexity: 15

    goimports:
        local-prefixes: gitlab.digitalms.ru


    golint:
        # minimal confidence for issues, default is 0.8
       min-confidence: 0.8


    dogsled:
        # checks assignments with too many blank identifiers; default is 2
        max-blank-identifiers: 2


    errcheck:
        # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
        # default is false: such cases aren't reported by default.
        check-type-assertions: false
        # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
        # default is false: such cases aren't reported by default.
        check-blank: false


    gocognit:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 100


    nestif:
        # minimal complexity of if statements to report, 5 by default
        min-complexity: 20


    gofmt:
        # simplify code: gofmt with `-s` option, true by default
        simplify: true

    lll:
        # max line length, lines longer will be reported. Default is 120.
        # '\t' is counted as 1 character by default, and can be changed with the tab-width option
        line-length: 200
        # tab width in spaces. Default to 1.
        tab-width: 1

    maligned:
        # print struct with more effective memory layout or not, false by default
        suggest-new: true

    misspell:
        # Correct spellings using locale preferences for US or UK.
        # Default is to use a neutral variety of English.
        # Setting locale to US will correct the British spelling of 'colour' to 'color'.
        locale: US
        ignore-words:

    nakedret:
        # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
        max-func-lines: 30

    nolintlint:
        # Enable to ensure that nolint directives are all used. Default is true.
        allow-unused: false
        # Disable to ensure that nolint directives don't have a leading space. Default is true.
        allow-leading-space: true
        # Exclude following linters from requiring an explanation.  Default is [].
        allow-no-explanation: [ ]
        # Enable to require an explanation after each nolint directive. Default is false.
        require-explanation: true
        # Enable to require an explanation after each nolint directive. Default is false.
        require-specific: false

    rowserrcheck:
        packages:
            - github.com/jmoiron/sqlx

    testpackage:
        # regexp pattern to skip files
        skip-regexp: (export|internal)_test\.go

    unparam:
        # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
        # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
        # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
        # with golangci-lint call it on a directory with the changed file.
        check-exported: false

    unused:
        # treat code as a program (not a library) and report unused exported identifiers; default is false.
        # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
        # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
        # with golangci-lint call it on a directory with the changed file.
        check-exported: false

    whitespace:
        multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
        multi-func: false # Enforces newlines (or comments) after every multi-line function signature
